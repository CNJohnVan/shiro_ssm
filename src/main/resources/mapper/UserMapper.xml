<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.integration.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.integration.pojo.User">
        <id column="user_id" jdbcType="INTEGER" property="user_id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
    </resultMap>
    <resultMap id="RoleResultMap" type="com.integration.pojo.Role">
        <id column="role_id" jdbcType="INTEGER" property="role_id"/>
        <result column="role_name" jdbcType="VARCHAR" property="role_name"/>
    </resultMap>
    <resultMap id="PermissionResultMap" type="com.integration.pojo.Permission">
        <id column="permission_id" jdbcType="INTEGER" property="permission_id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
    </resultMap>
    <sql id="Base_Column_List">
    user_id, username, password
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user
        where user_id = #{user_id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sys_user
    where user_id = #{user_id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.integration.pojo.User">
    insert into sys_user (user_id, username, password
      )
    values (#{user_id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.integration.pojo.User">
        insert into sys_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="user_id != null">
                user_id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="user_id != null">
                #{user_id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.integration.pojo.User">
        update sys_user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{user_id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.integration.pojo.User">
    update sys_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where user_id = #{user_id,jdbcType=INTEGER}
  </update>
    <!--自定义SQL-->
    <select id="findByUserName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user
        where username = #{username,jdbcType=INTEGER}
    </select>
    <select id="findRoles" parameterType="java.lang.String" resultMap="RoleResultMap">
        SELECT
            sys_role.role_id,
            sys_role.role_name
        FROM sys_user
        INNER JOIN sys_user_role ON sys_user.user_id = sys_user_role.user_id
        INNER JOIN sys_role ON sys_user_role.role_id = sys_role.role_id
        where username = #{username,jdbcType=INTEGER}
  </select>
    <select id="findPermissions" parameterType="java.lang.String" resultMap="PermissionResultMap">
        SELECT
            sys_permission.permission_id,
            sys_permission.`name`,
            sys_permission.url
        FROM sys_user
        INNER JOIN sys_user_role ON sys_user.user_id = sys_user_role.user_id
        INNER JOIN sys_role ON sys_user_role.role_id = sys_role.role_id
        INNER JOIN sys_role_permission ON sys_role.role_id = sys_role_permission.role_id
        INNER JOIN sys_permission ON sys_role_permission.permission_id = sys_permission.permission_id
        where username = #{username,jdbcType=INTEGER}
    </select>
</mapper>